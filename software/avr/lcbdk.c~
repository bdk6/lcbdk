
#define F_CPU 16000000

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#include "lcd_44780.h"

volatile static int t1_count = 0;
volatile static int t0_count = 0;

int itos(int32_t i, char* s, int c);
float find_c(uint32_t f5);


void timer0_init(void)
{
  // TCCR0
  // [ -|-|-|-|-|cs2|cs1|cs0]
  TCCR0 = 0;  // clock source none
  // TIMSK
  // [ocie2|toie2|tocie1|ocie1a|ocie1b|toie1| - |toie0 ]
  TIMSK |= (1 << 0);   // enable ovf interrupt
  TCNT0 = 0;
}

// Timer1 (16 bit) times the measure interval
// It interrupts on overflow
// prescale 1024: 16 Mhz / 1024 = 15625
// 15625 / 5 = 3125
// prescale 64: 16 Mhz / 64 = 250,000
// 250,000 / 5 = 50,000 for 1/5th sec
// Use normal mode and int on ovf
// Set timer to 15536 (65536-50000) and start
void timer1_init(void)
{
  //TCCR1A
  // [com1a1|com1a0|com1b1|com1b0|foc1a|foc1b|wgm11|wgm10]
  TCCR1A = 0;  
  //TCCR1B
  // [icnc1|ices1| - | wgm13|wgm12|cs12|cs11|cs10]
  TCCR1B = 0;  // clock source none

  // TIMSK
  // [ ocie2|toie2|ticie1|ocie1a|ocie1b|toie1| - |toie0 ]
  //              [       timer 1            ]
  TIMSK |= (1 << 2);  // enable ovf int
  TCNT1 = 0;
}

static uint16_t upper_freq = 0;
static uint32_t freq = 0;
static volatile ready_flag = 0;
void start_measure(void)
{
  // clear variables
  upper_freq = 0;
  freq = 0;
  
  // clear timers
  TCNT0 = 0;
  TCNT1 = 15536;  // 65536 - 50000
  
  // start timers
  TCCR1B  |= 3; // div 64 -- start
  TCCR0 |= 6; // clock on rising edge of t0
}

// timer 1 isr
// stop timer 0
// stop timer 1

ISR(TIMER1_OVF_vect)
{
  // stop timers
  TCCR0 &= ~(0x07);  // turn off clock to timer 0
  TCCR1A &= ~(0x07);  // turn off clock to timer 1
  // get count
  freq = (((uint32_t) upper_freq) << 8 ) + TCNT0;
  t1_count++;
  //PORTD ^= 1;
  ready_flag = 1;
}


// timer 0 isr
// inc external count
ISR(TIMER0_OVF_vect)
{
  upper_freq++;
}

  
///////////////////////////////////////////////////////////////
int main()
{
  DDRD |= 0x01;  // D0 has LED
  //PORTD |= 0x01; // turn it on

  // set up for buttons
  DDRD &= ~0xc0; // set d6,d7 as inputs;
  PORTD |= 0xc0;  // turn on pullups
  
  timer0_init();
  timer1_init();
  LCD_44780_init(16,2);
  LCD_44780_clear();
  LCD_44780_write_data('H');
  LCD_44780_write_data('i');
  char st[10];
  //itos(1000, st, 5);
  //LCD_44780_write_string(st);
  _delay_ms(1000);
  int c = 0;
  PORTD &= 0xfe;
  sei();
  //start_measure();
  while(1)
    {
       LCD_44780_write_data( (uint8_t)(c & 0xff) );
       // _delay_ms(100);
      //PORTD  &= 0xfe;
      //_delay_ms(100);
      //PORTD |= 0x01;
      start_measure();
      int tmp = t1_count;
      //while(t1_count == tmp);
      while(!ready_flag);
      ready_flag = 0;
      
      if(t1_count & 1)
      {
       PORTD |= 1;
      }
      else
      {
       PORTD &= 0xfe;
      }
      LCD_44780_clear();
      //itos(t1_count, st, 5);
      itos(freq, st, 7);
      LCD_44780_write_string(st);

      float c = find_c(freq);
      uint32_t ci = (int)(c * 1E13);
      
      itos(ci, st, 6);
      LCD_44780_write_string(st);
      int btns = (PIND >> 6)  & 0x03;
      itos(btns, st, 3);
      LCD_44780_write_string(st);
      
      
      c++;
    }
  return 0;
}


int itos(int32_t i, char* s, int c)
{
  uint8_t neg = 0;
  if (i < 0)
    {
      neg = 1;
      i = -i;
    }
  s[--c] = 0;
  for(int j = 0; j <c; j++)
    {
      s[j] = ' ';
    }
  while(i > 0 && c > 0)
    {
      c--;
      int ch = i % 10;
      s[c] = ch + '0';
      i /= 10;
    }

  return 0;
}



#define pi  3.1415926538

float find_c(uint32_t f5)
{
  float rtn = 0.0;
  float freq = (float) f5 * 5.0;
  float lc = (1/(2 * pi * freq)) * (1/(2 * pi * freq));
  rtn = lc / .000068;  // 68 uH
  return rtn;
}

  
  
  
